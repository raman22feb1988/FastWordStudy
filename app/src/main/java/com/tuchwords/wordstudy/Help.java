package com.tuchwords.wordstudy;

public class Help {
    public String getCustomHelp() {
        return "<b>word like '__X__'</b> will return all 5 letter words with X in the third position.<br><b>length = 4 order by word</b> will return all 4 letter words in alphabetical order.<br><b>length != 7 and tag = 'Unknown' order by word desc</b> will return all words not 7 letters long which you tagged as 'Unknown' in reverse alphabetical order.<br><b>length &gt; 7 and word like '%Z%'</b> will return words of length 8 letters or more containing the letter Z.<br><b>length &gt;= 7 and word like '%ING' and back not like '%S%'</b> will return all words 7 letters or more ending in ING and without back hook S.<br><b>length &lt;= 8 and alphagram like '%V%W%'</b> will return all words 8 letters or less containing letters V and W in any order. Letters inside 'alphagram like' need to be in alphabetical order.<br><br><b>Column Names:</b><br><u>Table 'words':</u><br>word (Text): The word.<br>length (Integer): Word length.<br>alphagram (Text): Letters of the word in alphabetical order.<br>definition (Text): Word meaning.<br>probability (Real): Word probability.<br>back (Text): Back hooks of the word.<br>front (Text): Front hooks of the word.<br>tag (Text): Tag given to the word.<br>page (Text): Page number of word with 100 words per page.<br>answers (Integer): Number of anagrams of the word.<br>serial (Integer): Order of the word for given length.<br>position (Integer): Grid number of the word with 100 words per page.<br>timestamp (Text): Time when the word was last tagged.<br>reverse (Text): Reverse of the word.<br>anagram (Text): Letters of the word in reverse alphabetical order.<br>csw24, csw21, csw19, csw15, csw12, csw07, nwl23, nwl20, nwl18, twl06, nswl23, nswl20, nswl18, wims, cel21 (Integer): 1 if the word exists in each of the lexicons, 0 otherwise.<br>no_a, no_b, no_c, no_d, no_e, no_f, no_g, no_h, no_i, no_j, no_k, no_l, no_m, no_n, no_o, no_p, no_q, no_r, no_s, no_t, no_u, no_v, no_w, no_x, no_y, no_z (Integer): Number of occurrences of each letter in the word.<br>vowels (Integer): Number of vowels in the word.<br>consonants (Integer): Number of consonants in the word.<br>points (Integer): Total number of points for the word.<br>power (Integer): Number of power tiles (J, Q, X and Z) in the word.<br><br><u>Table 'scores':</u><br>length (Integer): Word length (0 for Filter By Tags of all lengths and 1 for Custom Query).<br>query (Text): Custom Query for length = 0 and 1, filtered tag for length &ge; 2 ('*' for all tags).<br>counter (Integer): Number of page last visited for given word length.<br><br><u>Table 'colours':</u><br>tag (Text): Tag name.<br>colour (Text): RGB hexadecimal string of tag colour.<br><br><u>Table 'zoom':</u><br>activity (Text): 'Main' page.<br>rows (Integer): Number of rows in grid view.<br>columns (Integer): Number of columns in grid view.<br>size (Integer): Font size of the grid view text.<br><br><u>Table 'prefixes':</u><br>prefix (Text): Word prefix, + at the end for doubling first letter, - at the end for dropping first letter.<br>before (Text): Word prefix before these letters, empty for all letters.<br><br><u>Table 'suffixes':</u><br>suffix (Text): Word suffix, + at the start for doubling last letter, - at the start for dropping last letter.<br>after (Text): Word suffix after these letters, empty for all letters.";
    }

    public String getSqlHelp() {
        return "<b>create table phonies(_length_ integer, _word_ text)</b> will create a new table 'phonies' with columns 'length' of number data type and 'word' of String data type.<br><b>insert into colours values('Chemical', '#A6CAF0')</b> will add a new tag 'Chemical' with RGB colour code of (166, 202, 240).<br><b>update words set tag = 'Known' where word = 'BOOLEAN'</b> will change the tag to 'Known' for the word 'BOOLEAN' ('BOOLEAN' is not a valid word).<br><b>alter table words add _cardbox_ text</b> will add a new column 'cardbox' of String data type to the table 'words'.<br><b>delete from words where word = 'KEYCHAIN'</b> will remove the word 'KEYCHAIN' ('KEYCHAIN' is not a valid word).<br><b>drop table tags</b> will delete the entire table 'tags'.<br><br><b>Column Names:</b><br><u>Table 'words':</u><br>word (Text): The word.<br>length (Integer): Word length.<br>alphagram (Text): Letters of the word in alphabetical order.<br>definition (Text): Word meaning.<br>probability (Real): Word probability.<br>back (Text): Back hooks of the word.<br>front (Text): Front hooks of the word.<br>tag (Text): Tag given to the word.<br>page (Text): Page number of word with 100 words per page.<br>answers (Integer): Number of anagrams of the word.<br>serial (Integer): Order of the word for given length.<br>position (Integer): Grid number of the word with 100 words per page.<br>timestamp (Text): Time when the word was last tagged.<br>reverse (Text): Reverse of the word.<br>anagram (Text): Letters of the word in reverse alphabetical order.<br>csw24, csw21, csw19, csw15, csw12, csw07, nwl23, nwl20, nwl18, twl06, nswl23, nswl20, nswl18, wims, cel21 (Integer): 1 if the word exists in each of the lexicons, 0 otherwise.<br>no_a, no_b, no_c, no_d, no_e, no_f, no_g, no_h, no_i, no_j, no_k, no_l, no_m, no_n, no_o, no_p, no_q, no_r, no_s, no_t, no_u, no_v, no_w, no_x, no_y, no_z (Integer): Number of occurrences of each letter in the word.<br>vowels (Integer): Number of vowels in the word.<br>consonants (Integer): Number of consonants in the word.<br>points (Integer): Total number of points for the word.<br>power (Integer): Number of power tiles (J, Q, X and Z) in the word.<br><br><u>Table 'scores':</u><br>length (Integer): Word length (0 for Filter By Tags of all lengths and 1 for Custom Query).<br>query (Text): Custom Query for length = 0 and 1, filtered tag for length &ge; 2 ('*' for all tags).<br>counter (Integer): Number of page last visited for given word length.<br><br><u>Table 'colours':</u><br>tag (Text): Tag name.<br>colour (Text): RGB hexadecimal string of tag colour.<br><br><u>Table 'zoom':</u><br>activity (Text): 'Main' page.<br>rows (Integer): Number of rows in grid view.<br>columns (Integer): Number of columns in grid view.<br>size (Integer): Font size of the grid view text.<br><br><u>Table 'prefixes':</u><br>prefix (Text): Word prefix, + at the end for doubling first letter, - at the end for dropping first letter.<br>before (Text): Word prefix before these letters, empty for all letters.<br><br><u>Table 'suffixes':</u><br>suffix (Text): Word suffix, + at the start for doubling last letter, - at the start for dropping last letter.<br>after (Text): Word suffix after these letters, empty for all letters.";
    }
}